// This file represents a showcase (in our own IML format) of various constraints that I've found in
// the eCos I386 model. Its purpose is to provide basis for an encoding in Clafer.
// Thorsten Berger

// feature naming convention:
// if the feature is defined here, I shortened its name; otherwise,
// non-defined features still have their full name from the eCos
// model, starting with CYG_

package ECOS_SHOWCASE{
	display "ecos showcase model"

	// some simple features for warm up...

      option TFTPD_THREAD_STACK_SIZE{
      display "Stack size for TFTP threads."
      default_value [(CYGNUM_HAL_STACK_SIZE_TYPICAL + (3*(SEGSIZE+4))) ]
      flavor data
    }

    component GROUPED_LIBS{
      display "Grouped libraries for linking"
      requires [is_substr(GROUPED_LIBS, "libtarget.a") ]
      flavor data
    }

	component FunWithLegalValues{

		option INTERRUPTS_STACK_SIZE{
		  display "Interrupt stack size"
		  legal_values [128 to 1048576 ]
		  flavor data
		}
		option POOL_SIZE{
			display "Node pool size"
			legal_values [1 to 9999999999 ]
			requires [ POOL_SIZE >= ( CYGNUM_FILEIO_NFILE + 2 ) ]
			flavor data
		}
		option MAX_LOCALE_NAME_SIZE{
			display "Size of locale name strings"
			legal_values [(CYGFUN_LIBC_I18N_LOCALE_C_EUCJP ? 8 : (CYGFUN_LIBC_I18N_LOCALE_C_SJIS ? 7 : (CYGFUN_LIBC_I18N_LOCALE_C_JIS ? 6 : 2))) to 0x7fffffff ]
			default_value [(CYGFUN_LIBC_I18N_LOCALE_C_EUCJP ? 8 : (CYGFUN_LIBC_I18N_LOCALE_C_SJIS ? 7 : (CYGFUN_LIBC_I18N_LOCALE_C_JIS ? 6 : 2))) ]
			flavor data
		}

	}

	component FunWithManyConstraints{

		option A{
			display "an option with a lot of constraints"
			implements [ INT1 ]
			active_if [ B ]
			requires [ C ]
			requires [CYGBLD_MEMALLOC_MALLOC_IMPLEMENTATION_HEADER == "<cyg/memalloc/memvar.hxx>" ]
			requires [CYGBLD_ISO_CTYPE_HEADER == "<cyg/libc/i18n/newlibctype.h>" ]
			requires [CYGNUM_FS_FAT_NODE_POOL_SIZE >= (CYGNUM_FILEIO_NFILE+2) ]
			default_value [ D ]
			flavor booldata
		}

	}

	component FunWithTestCases{

		component HAL_TESTS{
			display "Common HAL tests"
			calculated ["tests/context tests/basic" . ((!CYGINT_HAL_TESTS_NO_CACHES) ? " tests/cache" : "") . ((CYGPKG_HAL_BUILD_COMPILER_TESTS) ? " tests/cpp1 tests/vaargs" : "") . ((!CYGVAR_KERNEL_COUNTERS_CLOCK) ? " tests/intr" : "") ]
			flavor data
		}
	}

	component FunWithDataFeatureNesting{

		component SCHED_PRIORITIES{
			display "Number of priority levels"
			legal_values [1 to 32 ]
			default_value [32 ]
			flavor data

			option SCHED_BITMAP_SIZE{
				display "Bitmap size"
				calculated [SCHED_PRIORITIES ]
				flavor data
			}

			option SCHED_SORTED_QUEUES{
				display "Dequeue highest priority threads first"
				default_value [0 ]
				flavor bool
			}
		}
	}

	component FunWithInterfaces{
		display "fun with interfaces"
		flavor none

		interface INT1{
			display "interface 1 (mutex)"
			requires [ INT1 <= 1 ]
			active_if [ SCHED_SORTED_QUEUES ]
		}
		interface INT2{
			display "interface 2 (or)"
			requires [ INT2 > 0 ]
		}
		interface INT3{
			display "interface 3 (xor)"
			requires [ INT3 == 1 ]
		}

		//  in a real example:
		interface KERNEL_SCHEDULER{
			display "Number of schedulers in this configuration"
			requires [1 == CYGINT_KERNEL_SCHEDULER ]
		}

		component SCHED_MLQUEUE{
			display "Multi-level queue scheduler"
			default_value [1 ]
			implements [KERNEL_SCHEDULER ]

			option TRACE_TIMESLICE{
				display "Output timeslices when tracing"
				active_if [CYGDBG_USE_TRACING ]
				requires [!CYGDBG_INFRA_DEBUG_TRACE_ASSERT_SIMPLE ]
				default_value [0 ]
			}
		}

		option SCHED_BITMAP{
			display "Bitmap scheduler"
			default_value [0 ]
			implements [ KERNEL_SCHEDULER ]
			implements [ CYGINT_KERNEL_SCHEDULER_UNIQUE_PRIORITIES ]
			requires [ !CYGPKG_KERNEL_SMP_SUPPORT ]
		}

		component INVERSION_PROTOCOL{
			display "Priority inversion protection protocols"
			legal_values ["SIMPLE" ]
			default_value ["SIMPLE" ]
			active_if [ MLQUEUE ]
			requires [ UNIQUE_PRIORITIES == 0 ]
			flavor booldata

			option PROTOCOL_INHERIT{
				display "Enable priority inheritance protocol"
				default_value [1 ]
				implements [ PROTOCOL_COUNT ]
			}

			component PROTOCOL_CEILING{
				display "Enable priority ceiling protocol"
				default_value [1 ]
				implements [ PROTOCOL_COUNT ]

				option DEFAULT_PRIORITY{
				  display "Default priority ceiling"
				  legal_values [0 to CYGNUM_KERNEL_SCHED_PRIORITIES - 1 ]
				  default_value [0 ]
				  active_if [ PROTOCOL_CEILING ]
				  flavor data
				}
			}

			option PROTOCOL_NONE{
				display "No priority inversion protocol"
				default_value [1 ]
				implements [ PROTOCOL_COUNT ]
			}


			option PROTOCOL_DEFAULT{
				display "Default priority inversion protocol"
				active_if [ PROTOCOL_COUNT > 1 ]
				legal_values ["INHERIT" "CEILING" "NONE" ]
				default_value [PROTOCOL_INHERIT ? "INHERIT" : PROTOCOL_CEILING ? "CEILING" : "NONE" ]
				flavor data
			}

			option PROTOCOL_DYNAMIC{
				display "Specify mutex priority inversion protocol at runtime"
				default_value [1 ]
				active_if [PROTOCOL_COUNT > 1 ]
			}

			interface PROTOCOL_COUNT{
				display "Number of protocols selected"
			}

		}

	}

}
